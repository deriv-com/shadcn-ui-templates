name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release to trigger'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      current_version:
        description: 'Current version (e.g., 1.0.0) - leave empty to auto-detect'
        required: false
        default: ''
      create_tag:
        description: 'Create and push a git tag for this version'
        required: false
        default: true
        type: boolean

# Set permissions for npm publishing
permissions:
  contents: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "npm-publish"
  cancel-in-progress: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      
    - name: Setup Node.js
      uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build components
      run: node scripts/build-components.js
      
    - name: Verify build output
      run: |
        echo "üì¶ Build output verification:"
        ls -la dist/
        echo ""
        echo "üìÅ Components:"
        ls -la dist/components/ || echo "No components directory"
        echo ""
        echo "üìÅ Lib:"
        ls -la dist/lib/ || echo "No lib directory"
        echo ""
        echo "üìÅ Styles:"
        ls -la dist/styles/ || echo "No styles directory"
        echo ""
        echo "üìÅ Registry:"
        ls -la dist/registry/ || echo "No registry directory"
        echo ""
        echo "üìÑ Package files:"
        ls -la dist/package.json dist/README.md dist/CHANGELOG.md dist/index.ts || echo "Missing package files"
        
    - name: Get current version
      id: get_version
      run: |
        if [ -n "${{ github.event.inputs.current_version }}" ]; then
          CURRENT_VERSION="${{ github.event.inputs.current_version }}"
        else
          # Try to get version from package.json
          if [ -f "package.json" ]; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
          else
            CURRENT_VERSION="0.0.0"
          fi
        fi
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ Current version: $CURRENT_VERSION"
        
    - name: Calculate new version
      id: calc_version
      run: |
        CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
        RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        
        # Parse current version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Calculate new version based on release type
        case "$RELEASE_TYPE" in
          "patch")
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
          "minor")
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          "major")
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          *)
            echo "‚ùå Invalid release type: $RELEASE_TYPE"
            exit 1
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ New version: $NEW_VERSION ($RELEASE_TYPE release)"
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Update package.json version
      run: |
        cd dist
        npm version $VERSION --no-git-tag-version
        echo "üì¶ Updated package.json to version: $VERSION"
        
    - name: Create and push git tag
      if: github.event.inputs.create_tag == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "v$VERSION"
        echo "üè∑Ô∏è Created and pushed tag: v$VERSION"
        
    - name: Publish to NPM
      run: |
        cd dist
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      if: github.event.inputs.create_tag == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.calc_version.outputs.new_version }}
        release_name: Release v${{ steps.calc_version.outputs.new_version }} (${{ github.event.inputs.release_type }})
        body: |
          üöÄ **@deriv/shadcn-components v${{ steps.calc_version.outputs.new_version }}**
          
          **Release Type:** ${{ github.event.inputs.release_type }}
          **Previous Version:** ${{ steps.get_version.outputs.current_version }}
          
          ## What's New
          - Updated shadcn/ui components with Deriv design tokens
          - Enhanced Figma design token integration
          - Improved TypeScript definitions
          - Better component documentation
          
          ## Installation
          ```bash
          npm install @deriv/shadcn-components@${{ steps.calc_version.outputs.new_version }}
          ```
          
          ## Usage
          ```tsx
          import { Button } from '@deriv/shadcn-components';
          
          function App() {
            return <Button>Click me</Button>;
          }
          ```
          
          ## Components
          This release includes all shadcn/ui components with Deriv's design token integration.
          
          ## Changelog
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false
